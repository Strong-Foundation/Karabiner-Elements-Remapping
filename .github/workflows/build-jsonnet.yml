# Name of the workflow
name: Build and Compile Jsonnet

# Define the events that trigger the workflow
on:
  # Trigger the workflow when changes are pushed to any .jsonnet file in the repository
  push:
    paths:
      # This will trigger the workflow only if any .jsonnet files are modified or added
      - "**.jsonnet" # Trigger only for .jsonnet file changes

  # Trigger the workflow when a pull request modifies any .jsonnet file in the repository
  pull_request:
    paths:
      # This will trigger the workflow if .jsonnet files are modified in a pull request
      - "**.jsonnet" # Trigger only for .jsonnet file changes in pull requests

  # Allow the workflow to be manually triggered from the GitHub UI
  workflow_dispatch:
    # No extra settings are needed for manual triggering (e.g., "Run workflow" button)

jobs:
  build:
    runs-on: ubuntu-latest # The workflow will run on the latest version of Ubuntu (GitHub-hosted runner)

    # Define environment variables to hold paths to files and directories
    env:
      JSONNET_DIR: "jsonnet" # The directory where the .jsonnet files are located
      OUTPUT_DIR: "config" # The directory where the compiled .json files will be saved
      OUTPUT_FILE: "config/windows-keyboard.json" # Output path for the compiled JSON file
      JSONNET_FILE: "jsonnet/windows-mac-remap.jsonnet" # Path to the specific Jsonnet file to compile

    steps:
      # Step 1: Checkout the repository code so the workflow can access the files
      - name: Checkout code
        uses: actions/checkout@v3 # This action checks out the repository's code to the runner's workspace

      # Step 2: Set up the environment and install dependencies (like Jsonnet)
      - name: Set up Jsonnet
        run: |
          # Update the package list to make sure the latest packages are available
          sudo apt-get update
          # Install the Jsonnet tool to be able to compile .jsonnet files
          sudo apt-get install -y jsonnet

      # Step 3: Check for changes in the .jsonnet files before proceeding
      - name: Check for changes in .jsonnet files
        run: |
          # Check if there are any changes in the specified .jsonnet files
          if git diff --exit-code --quiet -- "${{ env.JSONNET_FILE }}"; then
            # If no changes are detected, exit the workflow early to save processing time
            echo "No updates to .jsonnet files, exiting."
            exit 0  # Exit without continuing to the build and push steps
          fi

      # Step 4: Run the build script to generate JSON files from Jsonnet
      - name: Compile Jsonnet files
        run: |
          # Make sure the build script is executable
          chmod +x ./scripts/build-jsonnet.sh
          # Run the build script to compile the .jsonnet files into .json files
          ./scripts/build-jsonnet.sh  # This script will take care of the compilation

      # Step 5: Commit and push the generated JSON files to the repository
      - name: Commit and push compiled JSON files
        run: |
          # Stage the generated .json files for commit
          git add $OUTPUT_DIR/*.json  # Use the OUTPUT_DIR environment variable to find the .json files
          # Commit the changes with a message that indicates the update from the Jsonnet build
          git commit -m "Build and update JSON files from Jsonnet"
          # Push the committed changes to the repository
          git push  # This will push the changes to the remote repository on GitHub
